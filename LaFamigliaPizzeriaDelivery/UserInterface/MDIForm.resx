<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAHlvVAB6blQAeW5UAHpuVAB6blQAeW5UAnpuVB56blRNem5UgnpuVLF6blTUem5U7Hpu
        VPp6blT/em5U/3puVPp6blTsem5U1HpuVLF6blSCem5UTXpuVB55bVMCem5UAHpuVAB5bVQAem5UAHpu
        VAAAAAAAAAAAAHluUwB6blQAem5TAHpuVAB6blQAem5UFnpuVFR6blSeem5U13puVPd6blT/em5U/3pu
        VPp6blTwem5U53puVOF6blThem5U53puVPB6blT6em5U/3puVP96blT3em5U13puVJ56blRUem5UFnpu
        VAB6blQAeW1TAHpuVAB6blQAem5UAHpuVAB6blQAem5UIXpuVHl6blTQem5U/XpuVP96blTwem5Ux3pu
        VJd6blRqem5USHpuVDJ6blQkem5UHnpuVB56blQkem5UMnpuVEh6blRqem5Ul3puVMh6blTwem5U/3pu
        VP16blTQem5UeHpuVCF6blQAem5UAHpuVAB6blQAem5UFXpuVHR6blTZem5U/3puVPp6blTGem5UeHpu
        VDV6blQMem5UAHpuVAB6bVMBem5UDHpuVBZ6blQcem5UHHpuVBZ6blQMeW1TAXpuVAB6blQAem5UDHpu
        VDV6blR4em5UxnpuVPp6blT/em5U2XpuVHR6blQVem5UAHpuVFF6blTBem5U/3puVPl6blSzem5UUHpu
        VA56blQAem5UBnpuVCx6blReem5UjnpuVLN6blTMem5U2npuVOF6blThem5U2npuVMx6blSzem5Tjnxt
        UV5+bE4sgWtJBnpuVAB6blQOem5UUXpuVLN6blT5em5U/3puVMF6blRQem5Uw3puVP96blTkem5UWHpu
        VAh6blQAem5UInpuVG16blS6em5U63puVP96blT/em5U/3puVPR6blTpem5U43puVON6blTpem5U9Htt
        Uv14b1f/bnNl/m1zZul3b1m5fW1QbXpuUyJ6blQAem5UCHpuVFh6blTkem5U/3puVMN6blRNem5U7npu
        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
        Af//gAH//8AD///AA///4Af///AP///wD/8=
</value>
  </data>
</root>